xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd('~/git-repos/project-es3')
getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
#linear regression for each factor against the outcome variable (months it takes to find job)
for (i in 1:ncol(data)){
print(ggplot(data, aes(x = data[[i]], y = months)) +
geom_point(alpha = 0.1) +
geom_smooth(method=lm) +
geom_jitter() +
labs(x = colnames(data)[i]))
}
#additional gpa graphs to remove values of 0.0 for GPA
ggplot(data, aes(x = major_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = gender, y = months)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
library(ggplot2)
#getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#setwd('~/git-repos/project-es3')
#getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd('~/git-repos/project-es3')
#getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
#linear regression for each factor against the outcome variable (months it takes to find job)
#internship = 1, part time = 2, full time = 3
#female = 1, male = 0
for (i in 1:ncol(data)){
print(ggplot(data, aes(x = data[[i]], y = months)) +
geom_point(alpha = 0.1) +
geom_smooth(method=lm) +
geom_jitter() +
labs(x = colnames(data)[i]))
}
#additional gpa graphs to remove values of 0.0 for GPA
ggplot(data, aes(x = major_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = gender, y = months)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd('~/git-repos/project-es3')
getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
#linear regression for each factor against the outcome variable (months it takes to find job)
#internship = 1, part time = 2, full time = 3
#female = 1, male = 0
for (i in 1:ncol(data)){
print(ggplot(data, aes(x = data[[i]], y = months)) +
geom_point(alpha = 0.1) +
geom_smooth(method=lm) +
geom_jitter() +
labs(x = colnames(data)[i]))
}
#additional gpa graphs to remove values of 0.0 for GPA
ggplot(data, aes(x = major_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
getwd()
setwd('~/git-repos/project-es3')
getwd()
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
#linear regression for each factor against the outcome variable (months it takes to find job)
#internship = 1, part time = 2, full time = 3
#female = 1, male = 0
for (i in 1:ncol(data)){
print(ggplot(data, aes(x = data[[i]], y = months)) +
geom_point(alpha = 0.1) +
geom_smooth(method=lm) +
geom_jitter() +
labs(x = colnames(data)[i]))
}
#additional gpa graphs to remove values of 0.0 for GPA
ggplot(data, aes(x = major_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
getwd()
data <- read.csv("././data/370_clean_num_2.csv") #has more records than clean_num
data <- read.csv("./data/370_clean_num_2.csv") #has more records than clean_num
data <- read.csv("../data/370_clean_num_2.csv") #has more records than clean_num
data <- read.csv('./data/clean_num.csv')
data <- read.csv('../data/clean_num.csv')
data <- read.csv("../data/370_clean_num_2.csv") #has more records than clean_num
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#setwd('~/git-repos/project-es3')
data <- read.csv("../data/370_clean_num_2.csv") #has more records than clean_num
#linear regression for each factor against the outcome variable (months it takes to find job)
#internship = 1, part time = 2, full time = 3
#female = 1, male = 0
for (i in 1:ncol(data)){
print(ggplot(data, aes(x = data[[i]], y = months)) +
geom_point(alpha = 0.1) +
geom_smooth(method=lm) +
geom_jitter() +
labs(x = colnames(data)[i]))
}
#additional gpa graphs to remove values of 0.0 for GPA
ggplot(data, aes(x = major_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
ggplot(data, aes(x = cumulative_GPA, y = months)) +
geom_point(alpha = 0.1 ) +
xlim(2,4) +
geom_smooth(method=lm)
data <- read.csv('../data/clean_num.csv')
data <- read.csv('../data/clean_num.csv')
data <- data %>%
# reformat graduation data as date
mutate(graduation_date = as.Date(graduation_date, "%m/%d/%Y")) %>%
# split job type into 3 binary columns (1 = internship, 2 = part time, 3 = full time)
mutate(fulltime = ifelse(Job_type == 3, 1, 0)) %>%
mutate(parttime = ifelse(Job_type == 2, 1, 0)) %>%
mutate(internship = ifelse(Job_type == 1, 1, 0)) %>%
select(-Job_type) %>%
# convert months to classification variable (0 = >3mo., 1 = <3mo.)
mutate(Months = ifelse(Months <= 3, 1, 0)) %>%
# split class standing into 5 binary columns
mutate(freshman = ifelse(class_standing_ == 1, 1, 0)) %>%
mutate(sophomore = ifelse(class_standing_ == 2, 1, 0)) %>%
mutate(junior = ifelse(class_standing_ == 3, 1, 0)) %>%
mutate(senior = ifelse(class_standing_ == 4, 1, 0)) %>%
mutate(fifth.year = ifelse(class_standing_ == 5, 1, 0)) %>%
mutate(alumni = ifelse(class_standing_ == 6, 1, 0)) %>%
select(-class_standing_)
library(dplyr)
library(rpart)
library(rattle)
data <- data %>%
# reformat graduation data as date
mutate(graduation_date = as.Date(graduation_date, "%m/%d/%Y")) %>%
# split job type into 3 binary columns (1 = internship, 2 = part time, 3 = full time)
mutate(fulltime = ifelse(Job_type == 3, 1, 0)) %>%
mutate(parttime = ifelse(Job_type == 2, 1, 0)) %>%
mutate(internship = ifelse(Job_type == 1, 1, 0)) %>%
select(-Job_type) %>%
# convert months to classification variable (0 = >3mo., 1 = <3mo.)
mutate(Months = ifelse(Months <= 3, 1, 0)) %>%
# split class standing into 5 binary columns
mutate(freshman = ifelse(class_standing_ == 1, 1, 0)) %>%
mutate(sophomore = ifelse(class_standing_ == 2, 1, 0)) %>%
mutate(junior = ifelse(class_standing_ == 3, 1, 0)) %>%
mutate(senior = ifelse(class_standing_ == 4, 1, 0)) %>%
mutate(fifth.year = ifelse(class_standing_ == 5, 1, 0)) %>%
mutate(alumni = ifelse(class_standing_ == 6, 1, 0)) %>%
select(-class_standing_)
train <- data %>%
filter(None_of_these == 0 | None_of_these == 1 & Months == 0) %>% # | has_position == 0 & Months == 0
select(-None_of_these)
test <- data %>%
filter(None_of_these == 1 & Months == 1) %>% # | has_position == 0 & Months == 1
select(-None_of_these)
#install.packages("https://cran.r-project.org/bin/windows/contrib/3.3/RGtk2_2.20.31.zip", repos=NULL)
library(dplyr)
library(rpart)
library(rattle)
data <- read.csv('../data/clean_num.csv')
View(data)
data <- read.csv('../data/clean_num.csv')
View(data)
View(data)
data <- data %>%
# reformat graduation data as date
mutate(graduation_date = as.Date(graduation_date, "%m/%d/%Y")) %>%
# split job type into 3 binary columns (1 = internship, 2 = part time, 3 = full time)
mutate(fulltime = ifelse(Job_type == 3, 1, 0)) %>%
mutate(parttime = ifelse(Job_type == 2, 1, 0)) %>%
mutate(internship = ifelse(Job_type == 1, 1, 0)) %>%
select(-Job_type) %>%
# convert months to classification variable (0 = >3mo., 1 = <3mo.)
mutate(Months = ifelse(Months <= 3, 1, 0)) %>%
# split class standing into 5 binary columns
mutate(freshman = ifelse(class_standing_ == 1, 1, 0)) %>%
mutate(sophomore = ifelse(class_standing_ == 2, 1, 0)) %>%
mutate(junior = ifelse(class_standing_ == 3, 1, 0)) %>%
mutate(senior = ifelse(class_standing_ == 4, 1, 0)) %>%
mutate(fifth.year = ifelse(class_standing_ == 5, 1, 0)) %>%
mutate(alumni = ifelse(class_standing_ == 6, 1, 0)) %>%
select(-class_standing_)
train <- data %>%
filter(None_of_these == 0 | None_of_these == 1 & Months == 0) %>% # | has_position == 0 & Months == 0
select(-None_of_these)
### !! NEED MORE TEST DATA !! ###
test <- data %>%
filter(None_of_these == 1 & Months == 1) %>% # | has_position == 0 & Months == 1
select(-None_of_these)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
fancyRpartPlot(tree)
predict(tree, test)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
fancyRpartPlot(tree)
data <- read.csv('../data/clean_num.csv')
View(data)
View(data)
library(ggplot2)
data <- read.csv('../data/clean_num.csv')
ggplot(data, aes(x = Gender, y = months)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = gender, y = months)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = gender, y = Months)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = gender, y = self.confidence)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = online_job_postings, y = self.confidence)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = self.confidence, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = self.confidence, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(data, aes(x = good_at_resume_cover_letters, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(data, aes(x = good_at_resume_cover_letters, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
plot(cookd(lm(online_job_postings ~ good_at_resume_cover_letters, data=data)))
library(base)
plot(cookd(lm(online_job_postings ~ good_at_resume_cover_letters, data=data)))
library(car)
plot(cookd(lm(online_job_postings ~ good_at_resume_cover_letters, data=data)))
plot(cooks.distance(lm(online_job_postings ~ good_at_resume_cover_letters, data)))
cooks.distance(lm(online_job_postings ~ good_at_resume_cover_letters, data))
plot(cooks.distance(lm(online_job_postings ~ good_at_resume_cover_letters, data)))
View(data)
View(data)
View(data)
View(data)
ggplot(data, aes(x = good_at_resume_cover_letters, y = resume_hrs)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = good_at_resume_cover_letters, y = resume_hrs + cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = good_at_resume_cover_letters, y = cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
library(dplyr)
library(rpart)
library(rattle)
?rpart
data <- read.csv('../data/clean_num.csv')
# reformat data
data <- data %>%
# reformat graduation data as date
mutate(graduation_date = as.Date(graduation_date, "%m/%d/%Y")) %>%
# split job type into 3 binary columns (1 = internship, 2 = part time, 3 = full time)
mutate(fulltime = ifelse(Job_type == 3, 1, 0)) %>%
mutate(parttime = ifelse(Job_type == 2, 1, 0)) %>%
mutate(internship = ifelse(Job_type == 1, 1, 0)) %>%
select(-Job_type) %>%
# convert months to classification variable (0 = >3mo., 1 = <3mo.)
mutate(Months = ifelse(Months <= 3, 1, 0)) %>%
# split class standing into 5 binary columns
mutate(freshman = ifelse(class_standing_ == 1, 1, 0)) %>%
mutate(sophomore = ifelse(class_standing_ == 2, 1, 0)) %>%
mutate(junior = ifelse(class_standing_ == 3, 1, 0)) %>%
mutate(senior = ifelse(class_standing_ == 4, 1, 0)) %>%
mutate(fifth.year = ifelse(class_standing_ == 5, 1, 0)) %>%
mutate(alumni = ifelse(class_standing_ == 6, 1, 0)) %>%
select(-class_standing_)
train <- data %>%
filter(None_of_these == 0 | None_of_these == 1 & Months == 0) %>% # | has_position == 0 & Months == 0
select(-None_of_these)
### !! NEED MORE TEST DATA !! ###
test <- data %>%
filter(None_of_these == 1 & Months == 1) %>% # | has_position == 0 & Months == 1
select(-None_of_these)
#example from class
model_dec_tree <- train(Months ~ .,
data = train,
method = "rpart",
trControl = ctrl,
tuneLength = 10)
?predict
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=1, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=1, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=4, cp=0.01))
fancyRpartPlot(tree)
?rpart
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=2, minbucket=4, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=8, minbucket=4, cp=0.01))
fancyRpartPlot(tree)
short_search <- filter(data, Months = 1)
short_search <- filter(data, Months == 1)
View(short_search)
View(short_search)
ggplot(data, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
library(ggplot2)
library(base)
library(car)
ggplot(data, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(data, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
?train
predict(tree, test)
library(dplyr)
library(rpart)
library(rattle)
data <- read.csv('../data/clean_num.csv')
# reformat data
data <- data %>%
# reformat graduation data as date
mutate(graduation_date = as.Date(graduation_date, "%m/%d/%Y")) %>%
# split job type into 3 binary columns (1 = internship, 2 = part time, 3 = full time)
mutate(fulltime = ifelse(Job_type == 3, 1, 0)) %>%
mutate(parttime = ifelse(Job_type == 2, 1, 0)) %>%
mutate(internship = ifelse(Job_type == 1, 1, 0)) %>%
select(-Job_type) %>%
# convert months to classification variable (0 = >3mo., 1 = <3mo.)
mutate(Months = ifelse(Months <= 3, 1, 0)) %>%
# split class standing into 5 binary columns
mutate(freshman = ifelse(class_standing_ == 1, 1, 0)) %>%
mutate(sophomore = ifelse(class_standing_ == 2, 1, 0)) %>%
mutate(junior = ifelse(class_standing_ == 3, 1, 0)) %>%
mutate(senior = ifelse(class_standing_ == 4, 1, 0)) %>%
mutate(fifth.year = ifelse(class_standing_ == 5, 1, 0)) %>%
mutate(alumni = ifelse(class_standing_ == 6, 1, 0)) %>%
select(-class_standing_)
# split into training and test datasets
# (filter out people just beginning job search (no job, searching for < 3 mo.))
train <- data %>%
filter(None_of_these == 0 | None_of_these == 1 & Months == 0) %>% # | has_position == 0 & Months == 0
select(-None_of_these)
### !! NEED MORE TEST DATA !! ###
test <- data %>%
filter(None_of_these == 1 & Months == 1) %>% # | has_position == 0 & Months == 1
select(-None_of_these)
# create decision tree
### !! INVESTIGATE RPART CONTROL !! ###
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=8, minbucket=4, cp=0.01))
fancyRpartPlot(tree)
# make predictions
predict(tree, test)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=9, minbucket=3, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=9, minbucket=3, cp=0.1))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=9, minbucket=3, cp=0.05))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=12, minbucket=4, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=12, minbucket=3, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=12, minbucket=5, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=8, minbucket=5, cp=0.01))
fancyRpartPlot(tree)
?rpart
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=8, minbucket=5, cp=0.01))
fancyRpartPlot(tree)
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=10, minbucket=5, cp=0.01))
fancyRpartPlot(tree)
short_search <- filter(data, Months == 1)
short_search <- filter(data, Months == 1)
data <- read.csv('../data/clean_num.csv')
short_search <- filter(data, Months == 1)
short_search <- filter(data, Months <= 3)
lm(online_job_postings ~ networking, data)
?lm
summary(lm(online_job_postings ~ networking, data))
resid(postings)
postings <- lm(online_job_postings ~ networking, data)
summary(postings)
resid(postings)
postings <- lm(online_job_postings ~ networking, data)
plot(resid(postings))
postings.lm <- lm(online_job_postings ~ networking, data)
summary(postings.lm)
plot(resid(postings.lm))
postings.lm <- loess(online_job_postings ~ networking, data)
summary(postings.lm)
plot(resid(postings.lm))
short_search <- filter(data, Months <= 3) %>% filter(online_job_postings < 500)
data <- read.csv('../data/clean_num.csv')
postings.lm <- lm(online_job_postings ~ networking, data)
plot(postings.lm)
plot(postings.lm)
ggplot(data, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
library(ggplot2)
library(base)
library(car)
ggplot(data, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
no_out <- filter(data, online_job_postings < 500)
ggplot(no_out, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
postings.lm <- lm(networking ~ online_job_postings, no_out)
summary(postings.lm)
ggplot(no_out, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(no_out, aes(x = networking, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
postings.lm <- loess(networking ~ online_job_postings, no_out)
summary(postings.lm)
plot(resid(postings.lm))
plot(resid(postings.lm))
postings.lm <- lm(networking ~ online_job_postings, no_out)
summary(postings.lm)
plot(resid(postings.lm))
postings.lm <- lm(online_job_postings ~ networking, no_out)
summary(postings.lm)
plot(resid(postings.lm))
postings.lm <- lm(online_job_postings ~ networking, no_out)
plot(postings.lm)
plot(resid(postings.lm))
plot(resid(postings.lm))
tree <- rpart(Months ~ ., data = train, method = "class", control=rpart.control(minsplit=10, minbucket=5, cp=0.01))
fancyRpartPlot(tree)
ggplot(data, aes(x = cover_letter_hours, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(no_out, aes(x = cover_letter_hours, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=lm)
ggplot(no_out, aes(x = cover_letter_hours, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = cover_letter_hours + resume_hrs, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = cover_letter_hours + resume_hrs + no_career_fairs, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = resume_hrs, y = online_job_postings)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = resume_hrs)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = resume_hrs)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = resume_hrs)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
ggplot(no_out, aes(x = online_job_postings, y = cover_letter_hours)) +
geom_point(alpha = 0.1 ) +
geom_smooth(method=loess)
